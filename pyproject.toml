[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dendromatics"
dynamic = ["version"]
description = "Automatic dendrometry and forest inventory for terrestrial point clouds"
readme = "README.rst"
requires-python = ">=3.8"
license = "GPL-3.0-or-later"
authors = [
    { name = "Carlos Cabo", email = "carloscabo@uniovi.es" },
    { name = "Diego Laino", email = "diegolainor@gmail.com" },
]
keywords = [
    "forestry",
    "lidar",
    "tls",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: GIS",
]
dependencies = [
    "cloth-simulation-filter>=1.1.4",    
    "jakteristics>=0.5.1",
    "laspy>=2.4.0",
    "numpy>=1.24.0",
    "scikit_learn>=1.2.0",
    "scipy>=1.10.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[project.urls]
Source = "https://github.com/3DFin/dendromatics"
Documentation = "https://dendromatics.readthedocs.io/en/latest/"
Issues = "https://github.com/3DFin/dendromatics/issues"

[tool.hatch.version]
path = "src/dendromatics/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-randomly",
]
[tool.hatch.envs.default.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/dendromatics --cov=tests --randomly-seed=1 {args}"
no-cov = "cov --no-cov {args}"

[[tool.hatch.envs.test.matrix]]
python = ["38", "39", "310", "311"]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "src/dendromatics/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.envs.docs]
detached = true
dependencies = [
  "sphinx",
  "sphinx-reference-rename",
  "sphinx-rtd-theme"
]
[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs docs/_build"
serve = "python -m http.server --directory docs/_build"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "ruff>=0.0.261",
  "black>=23.3.0"
]
[tool.hatch.envs.lint.scripts]
# static analysis with ruff
check-static = "ruff check {args:.}"
check-format = "black --check --diff --color {args:.}"
fix-static = "ruff --fix {args:.}"
fix-format = "black {args:.}"
check-all = ["check-static", "check-format"]
fix-all = [
  "fix-static",
  "fix-format",
  "check-all",
]

[tool.ruff]
select = ["E", "W", "YTT", "NPY", "PYI", "Q", "F", "B", "I"] 
# TODO Add D, PTH, RET, disabled for now as they collides with intial choices
target-version = "py310"
line-length = 88
# TODO: for now we ignore "Line too long error (E501)" 
# because our comments are too longs
# Black will take care of the line lenght in code anyway
ignore = ["E501", 
# Ignore docstring in public package and module
  "D100", "D104",
# Blank line before class
  "D203",
# multiline summary second line
  "D213",
# Temporary because global imports are a design choice
  "F405", "F403"
]

[tool.black]
line-length = 88
target-version = ["py310"]